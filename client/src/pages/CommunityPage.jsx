import React, { useState, useEffect, useCallback } from "react";
import {
  Container,
  Row,
  Col,
  Card,
  Spinner,
  Alert,
  ListGroup,
  ListGroupItem,
  Form,
  Button,
  Badge
} from "react-bootstrap";

import axios from "axios";
import { useLocation, Link } from 'react-router-dom';

// CSS styles
const styles = `
  .hover-shadow {
    transition: all 0.3s ease;
  }
  
  .hover-shadow:hover {
    transform: translateY(-5px);
    box-shadow: 0 8px 25px rgba(0,0,0,0.15) !important;
  }
  
  .transition-all {
    transition: all 0.3s ease;
  }
  
  .card-hover-effect:hover {
    border-color: #007bff !important;
  }
  
  .btn-lg {
    padding: 12px 30px;
    font-size: 1.1rem;
  }
  
  .social-icons a img:hover {
    transform: scale(1.1);
    transition: transform 0.3s ease;
  }
  
  .community-header {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
  }
`;

// Data v·ªÅ l·ª£i √≠ch cai thu·ªëc
const benefitsData = [
  {
    icon: <i className="fas fa-heart text-danger fs-4"></i>,
    title: "C·∫£i thi·ªán s·ª©c kh·ªèe tim m·∫°ch",
    description: "Sau 20 ph√∫t: Nh·ªãp tim v√† huy·∫øt √°p gi·∫£m. Sau 12 gi·ªù: N·ªìng ƒë·ªô CO trong m√°u tr·ªü v·ªÅ b√¨nh th∆∞·ªùng. Sau 1 nƒÉm: Nguy c∆° b·ªánh tim gi·∫£m 50%.",
    timeframe: "Ngay l·∫≠p t·ª©c"
  },
  {
    icon: <i className="fas fa-lungs text-primary fs-4"></i>,
    title: "Ph·ª•c h·ªìi ch·ª©c nƒÉng ph·ªïi",
    description: "Sau 2-12 tu·∫ßn: L∆∞u th√¥ng m√°u c·∫£i thi·ªán, ch·ª©c nƒÉng ph·ªïi tƒÉng l√™n. Ho v√† kh√≥ th·ªü gi·∫£m ƒë√°ng k·ªÉ.",
    timeframe: "2-12 tu·∫ßn"
  },
  {
    icon: <i className="fas fa-money-bill-wave text-success fs-4"></i>,
    title: "Ti·∫øt ki·ªám ti·ªÅn b·∫°c",
    description: "M·ªôt ng∆∞·ªùi h√∫t 1 g√≥i/ng√†y c√≥ th·ªÉ ti·∫øt ki·ªám 7-10 tri·ªáu VNƒê m·ªói nƒÉm. Ti·ªÅn n√†y c√≥ th·ªÉ d√πng cho nh·ªØng m·ª•c ƒë√≠ch c√≥ √Ω nghƒ©a kh√°c.",
    timeframe: "H√†ng ng√†y"
  },
  {
    icon: <i className="fas fa-smile text-warning fs-4"></i>,
    title: "C·∫£i thi·ªán t√¢m tr·∫°ng",
    description: "Gi·∫£m cƒÉng th·∫≥ng, lo √¢u. C·∫£i thi·ªán ch·∫•t l∆∞·ª£ng gi·∫•c ng·ªß. TƒÉng c∆∞·ªùng s·ª± t·ª± tin v√† h·∫°nh ph√∫c.",
    timeframe: "1-3 th√°ng"
  },
  {
    icon: <i className="fas fa-shield-alt text-info fs-4"></i>,
    title: "Gi·∫£m nguy c∆° ung th∆∞",
    description: "Sau 5 nƒÉm: Nguy c∆° ung th∆∞ mi·ªáng, h·ªçng gi·∫£m 50%. Sau 10 nƒÉm: Nguy c∆° ung th∆∞ ph·ªïi gi·∫£m 50%.",
    timeframe: "5-10 nƒÉm"
  },
  {
    icon: <i className="fas fa-users text-secondary fs-4"></i>,
    title: "B·∫£o v·ªá ng∆∞·ªùi th√¢n",
    description: "Lo·∫°i b·ªè kh√≥i thu·ªëc th·ª• ƒë·ªông, b·∫£o v·ªá s·ª©c kh·ªèe gia ƒë√¨nh v√† con em. T·∫°o m√¥i tr∆∞·ªùng s·ªëng trong l√†nh h∆°n.",
    timeframe: "Ngay l·∫≠p t·ª©c"
  }
];

// Data v·ªÅ t√°c h·∫°i c·ªßa thu·ªëc l√°
const harmfulEffectsData = [
  {
    icon: <i className="fas fa-skull-crossbones text-danger fs-4"></i>,
    title: "Ung th∆∞",
    description: "Thu·ªëc l√° ch·ª©a h∆°n 70 ch·∫•t g√¢y ung th∆∞. Nguy c∆° ung th∆∞ ph·ªïi cao g·∫•p 15-25 l·∫ßn so v·ªõi ng∆∞·ªùi kh√¥ng h√∫t.",
    severity: "R·∫•t nghi√™m tr·ªçng"
  },
  {
    icon: <i className="fas fa-heartbeat text-danger fs-4"></i>,
    title: "B·ªánh tim m·∫°ch",
    description: "TƒÉng nguy c∆° ƒë·ªôt qu·ªµ, nh·ªìi m√°u c∆° tim, b·ªánh m·∫°ch m√°u ngo·∫°i bi√™n. L√†m tƒÉng huy·∫øt √°p v√† cholesterol x·∫•u.",
    severity: "Nghi√™m tr·ªçng"
  },
  {
    icon: <i className="fas fa-lungs text-danger fs-4"></i>,
    title: "B·ªánh ph·ªïi t·∫Øc ngh·∫Ωn m√£n t√≠nh",
    description: "G√¢y kh√≥ th·ªü, ho m√£n t√≠nh, ƒë·ªùm nhi·ªÅu. L√†m gi·∫£m ch·ª©c nƒÉng ph·ªïi kh√¥ng th·ªÉ ph·ª•c h·ªìi ho√†n to√†n.",
    severity: "Nghi√™m tr·ªçng"
  },
  {
    icon: <i className="fas fa-baby text-warning fs-4"></i>,
    title: "·∫¢nh h∆∞·ªüng thai nhi",
    description: "Thai nhi c√≥ th·ªÉ b·ªã sinh non, nh·∫π c√¢n, d·ªã t·∫≠t b·∫©m sinh. TƒÉng nguy c∆° s·∫©y thai v√† thai ch·∫øt l∆∞u.",
    severity: "R·∫•t nghi√™m tr·ªçng"
  },
  {
    icon: <i className="fas fa-tooth text-secondary fs-4"></i>,
    title: "V·∫•n ƒë·ªÅ rƒÉng mi·ªáng",
    description: "G√¢y v√†ng rƒÉng, h√¥i mi·ªáng, vi√™m n∆∞·ªõu, r·ª•ng rƒÉng s·ªõm. TƒÉng nguy c∆° ung th∆∞ mi·ªáng v√† h·ªçng.",
    severity: "Trung b√¨nh"
  },
  {
    icon: <i className="fas fa-eye text-info fs-4"></i>,
    title: "T√°c h·∫°i kh√°c",
    description: "L√£o h√≥a da s·ªõm, gi·∫£m kh·∫£ nƒÉng ng·ª≠i v√† n·∫øm. ·∫¢nh h∆∞·ªüng kh·∫£ nƒÉng sinh s·∫£n. Gi·∫£m m·∫≠t ƒë·ªô x∆∞∆°ng.",
    severity: "Trung b√¨nh"
  }
];

const BlogPage = () => {
  const [posts, setPosts] = useState([]);
  const [loadingPosts, setLoadingPosts] = useState(true);
  const [error, setError] = useState("");
  const [success, setSuccess] = useState("");
  const [user, setUser] = useState(null);
  const [comments, setComments] = useState({});
  const [newCommentContent, setNewCommentContent] = useState({});

  const location = useLocation(); // Hook ƒë·ªÉ truy c·∫≠p tr·∫°ng th√°i v·ªã tr√≠

  const fetchPosts = useCallback(async () => {
    setLoadingPosts(true);
    try {
      const response = await axios.get("http://localhost:5000/api/auth/posts");
      setPosts(response.data);
      setError("");
    } catch (error) {
      console.error("Error fetching posts:", error);
      setError("Kh√¥ng th·ªÉ t·∫£i b√†i vi·∫øt. Vui l√≤ng th·ª≠ l·∫°i sau.");
    } finally {
      setLoadingPosts(false);
    }
  }, []);

  useEffect(() => {
    try {
      const userStr = localStorage.getItem("user");
      if (userStr && userStr !== 'undefined') {
        setUser(JSON.parse(userStr));
      }
    } catch (error) {
      console.error("Error parsing user from localStorage:", error);
      localStorage.removeItem("user");
      localStorage.removeItem("token");
    }

    fetchPosts();

    // Ki·ªÉm tra n·∫øu ƒë∆∞·ª£c chuy·ªÉn h∆∞·ªõng t·ª´ CreatePostPage v·ªõi th√†nh c√¥ng
    if (location.state?.postCreated) {
      setSuccess("B√†i ƒëƒÉng ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng!");
      // X√≥a tr·∫°ng th√°i ƒë·ªÉ kh√¥ng hi·ªÉn th·ªã l·∫°i khi l√†m m·ªõi
      window.history.replaceState({}, document.title);
    }
  }, [fetchPosts, location.state?.postCreated]); // Th√™m location.state.postCreated l√†m dependency

  const handleCloseSnackbar = () => {
    setError("");
    setSuccess("");
  };

  const getSeverityVariant = (severity) => {
    switch (severity) {
      case "R·∫•t nghi√™m tr·ªçng": return "danger";
      case "Nghi√™m tr·ªçng": return "warning";
      case "Trung b√¨nh": return "secondary";
      default: return "light";
    }
  };

  const getTimeframeVariant = (timeframe) => {
    switch (timeframe) {
      case "Ngay l·∫≠p t·ª©c": return "success";
      case "H√†ng ng√†y": return "primary";
      case "2-12 tu·∫ßn": return "info";
      case "1-3 th√°ng": return "warning";
      case "5-10 nƒÉm": return "secondary";
      default: return "light";
    }
  };

  return (
    <div className="d-flex flex-column min-vh-100">
      <style>{styles}</style>
      <main className="flex-grow-1"> 
        <Container className="my-4"> 
          
          {success && (
            <Alert variant="success" onClose={handleCloseSnackbar} dismissible className="my-3">
              {success}
            </Alert>
          )}
          {error && (
            <Alert variant="danger" onClose={handleCloseSnackbar} dismissible className="my-3">
              {error}
            </Alert>
          )}

          {/* Header Section */}
          <div className="text-center mb-5">
            <h1 className="display-4 text-primary fw-bold mb-3">üåü C·ªông ƒê·ªìng Cai Thu·ªëc üåü</h1>
            <p className="lead text-muted">
              Kh√°m ph√° th√¥ng tin h·ªØu √≠ch v√† chia s·∫ª h√†nh tr√¨nh cai thu·ªëc c√πng c·ªông ƒë·ªìng
            </p>
          </div>

          {/* T√°c h·∫°i c·ªßa thu·ªëc l√° */}
          <div className="mb-5">
            <div className="text-center mb-4">
              <h2 className="text-danger fw-bold">
                <i className="fas fa-exclamation-triangle me-2"></i>
                T√°c H·∫°i C·ªßa Thu·ªëc L√°
              </h2>
              <p className="text-muted">Hi·ªÉu r√µ t√°c h·∫°i ƒë·ªÉ c√≥ ƒë·ªông l·ª±c cai thu·ªëc</p>
            </div>
            <Row xs={1} md={2} lg={3} className="g-4">
              {harmfulEffectsData.map((harm, index) => (
                <Col key={index}>
                  <Card className="h-100 shadow-sm border-0 hover-shadow transition-all">
                    <Card.Body className="p-4">
                      <div className="d-flex align-items-center mb-3">
                        {harm.icon}
                        <h5 className="ms-3 fw-bold mb-0 text-dark">
                          {harm.title}
                        </h5>
                      </div>
                      <Card.Text className="text-secondary mb-3" style={{lineHeight: '1.6'}}>
                        {harm.description}
                      </Card.Text>
                      <Badge bg={getSeverityVariant(harm.severity)} className="px-3 py-2">
                        <i className="fas fa-warning me-1"></i>
                        {harm.severity}
                      </Badge>
                    </Card.Body>
                  </Card>
                </Col>
              ))}
            </Row>
          </div>

          <hr className="my-5" style={{height: '3px', background: 'linear-gradient(90deg, #dc3545, #28a745)'}} />

          {/* L·ª£i √≠ch c·ªßa vi·ªác cai thu·ªëc */}
          <div className="mb-5"> 
            <div className="text-center mb-4">
              <h2 className="text-success fw-bold">
                <i className="fas fa-leaf me-2"></i>
                L·ª£i √çch C·ªßa Vi·ªác Cai Thu·ªëc
              </h2>
              <p className="text-muted">Nh·ªØng thay ƒë·ªïi t√≠ch c·ª±c khi b·∫°n ng·ª´ng h√∫t thu·ªëc</p>
            </div>
            <Row xs={1} md={2} lg={3} className="g-4"> 
              {benefitsData.map((benefit, index) => (
                <Col key={index}> 
                  <Card className="h-100 shadow-sm border-0 hover-shadow transition-all"> 
                    <Card.Body className="p-4"> 
                      <div className="d-flex align-items-center mb-3"> 
                        {benefit.icon}
                        <h5 className="ms-3 fw-bold mb-0 text-dark"> 
                          {benefit.title}
                        </h5>
                      </div>
                      <Card.Text className="text-secondary mb-3" style={{lineHeight: '1.6'}}> 
                        {benefit.description}
                      </Card.Text>
                      <Badge bg={getTimeframeVariant(benefit.timeframe)} className="px-3 py-2">
                        <i className="fas fa-clock me-1"></i>
                        {benefit.timeframe}
                      </Badge>
                    </Card.Body>
                  </Card>
                </Col>
              ))}
            </Row>
          </div>

          <hr className="my-5" />

          {/* Call to Action */}
          <div className="text-center mb-5 p-4 bg-light rounded">
            <h3 className="text-primary mb-3">üí™ S·∫µn s√†ng thay ƒë·ªïi cu·ªôc s·ªëng?</h3>
            <p className="mb-3">H√£y b·∫Øt ƒë·∫ßu h√†nh tr√¨nh cai thu·ªëc ngay h√¥m nay v√† tr·∫£i nghi·ªám nh·ªØng l·ª£i √≠ch tuy·ªát v·ªùi!</p>
            <div className="d-flex gap-3 justify-content-center flex-wrap">
              <Link to="/my-progress" className="btn btn-primary btn-lg">
                <i className="fas fa-chart-line me-2"></i>Theo d√µi ti·∫øn ƒë·ªô
              </Link>
              <Link to="/achievements" className="btn btn-success btn-lg">
                <i className="fas fa-trophy me-2"></i>Xem huy hi·ªáu
              </Link>
              <Link to="/create-post" className="btn btn-outline-primary btn-lg">
                <i className="fas fa-plus me-2"></i>Chia s·∫ª c√¢u chuy·ªán
              </Link>
            </div>
          </div>

          <hr className="my-4" />

          <h2 className="text-center mb-4 text-primary"> 
            <i className="fas fa-comments me-2"></i>
            Chia s·∫ª kinh nghi·ªám cai nghi·ªán thu·ªëc l√°
          </h2>

          {loadingPosts ? (
            <div className="d-flex justify-content-center my-4"> 
              <Spinner animation="border" role="status" className="me-2" /> 
              <span className="text-secondary">ƒêang t·∫£i b√†i vi·∫øt...</span> 
            </div>
          ) : (
            <Row xs={1} md={2} className="g-4"> 
              {posts.map((post) => (
                <Col key={post.Id}> 
                  <Card className="h-100 shadow-sm hover-shadow transition-all"> 
                    {post.image && (
                      <Card.Img variant="top" src={post.image} alt={post.title} style={{ height: '200px', objectFit: 'cover' }} />
                    )}
                    <Card.Body>
                      <Card.Title className="text-primary">
                        {post.Title}
                      </Card.Title>
                      <Card.Text className="text-secondary">
                        {post.Content}
                      </Card.Text>
                      <Card.Text className="text-muted small">
                        <i className="fas fa-user me-1"></i>
                        ƒêƒÉng b·ªüi: <strong>{post.Author}</strong> -{" "}
                        <i className="fas fa-calendar me-1"></i>
                        {new Date(post.CreatedAt).toLocaleDateString()}
                      </Card.Text>
                      
                      <hr className="my-3" />
                      <h6 className="mb-3">
                        <i className="fas fa-comments me-2"></i>B√¨nh lu·∫≠n
                      </h6>
                      <CommentsDisplay postId={post.Id} user={user} />
                    </Card.Body>
                  </Card>
                </Col>
              ))}
            </Row>
          )}
        </Container>
      </main>
    </div>
  );
};

// Component m·ªõi ƒë·ªÉ hi·ªÉn th·ªã v√† nh·∫≠p b√¨nh lu·∫≠n 
const CommentsDisplay = ({ postId, user }) => {
  const [comments, setComments] = useState([]);
  const [newCommentContent, setNewCommentContent] = useState("");
  const [loadingComments, setLoadingComments] = useState(true);
  const [error, setError] = useState("");

  useEffect(() => {
    const fetchComments = async () => {
      setLoadingComments(true);
      try {
        const response = await axios.get(`http://localhost:5000/api/auth/posts/${postId}/comments`);
        setComments(response.data);
        setError("");
      } catch (error) {
        console.error(`Error fetching comments for post ${postId}:`, error);
        setError("Kh√¥ng th·ªÉ t·∫£i b√¨nh lu·∫≠n. Vui l√≤ng th·ª≠ l·∫°i sau.");
      } finally {
        setLoadingComments(false);
      }
    };
    fetchComments();
  }, [postId]);

  const handleAddComment = async () => {
    if (!user || !localStorage.getItem("token")) {
      setError("B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ b√¨nh lu·∫≠n.");
      return;
    }
    if (!newCommentContent || newCommentContent.trim() === "") {
      setError("N·ªôi dung b√¨nh lu·∫≠n kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng.");
      return;
    }

    try {
      const token = localStorage.getItem("token");
      const response = await axios.post(
        `http://localhost:5000/api/auth/posts/${postId}/comments`,
        { content: newCommentContent },
        {
          headers: { Authorization: `Bearer ${token}` },
        }
      );
      setComments(prevComments => [...prevComments, response.data.comment]);
      setNewCommentContent("");
      setError("");
    } catch (error) {
      console.error("Error adding comment:", error);
      setError(error.response?.data?.message || "L·ªói khi th√™m b√¨nh lu·∫≠n. Vui l√≤ng th·ª≠ l·∫°i.");
    }
  };

  return (
    <div> 
      {loadingComments ? (
        <div className="d-flex justify-content-center my-2">
          <Spinner animation="border" size="sm" className="me-1" /> 
          <span className="text-secondary">ƒêang t·∫£i b√¨nh lu·∫≠n...</span> 
        </div>
      ) : (
        comments.length === 0 ? (
          <p className="text-secondary">Ch∆∞a c√≥ b√¨nh lu·∫≠n n√†o.</p> 
        ) : (
          <ListGroup style={{ maxHeight: 200, overflowY: 'auto' }} className="border rounded p-1"> 
            {comments.map((comment, index) => (
              <ListGroupItem key={comment.Id || index} className="d-flex align-items-start p-1 border-0 border-bottom-dashed last-child-no-border"> {/* Thay th·∫ø ListItem b·∫±ng ListGroupItem */}
                <div className="flex-grow-1"> 
                  <strong className="d-block">{comment.Author}</strong> 
                  <span className="d-inline text-dark">{comment.Content}</span> 
                  <small className="d-block text-muted">{new Date(comment.CreatedAt).toLocaleDateString()}</small> 
                </div>
              </ListGroupItem>
            ))}
          </ListGroup>
        )
      )}

      {user && ( // Ch·ªâ hi·ªÉn th·ªã √¥ nh·∫≠p b√¨nh lu·∫≠n n·∫øu ng∆∞·ªùi d√πng ƒë√£ ƒëƒÉng nh·∫≠p
        <div className="mt-3"> 
          <Form.Control
            as="textarea"
            rows={2}
            placeholder="Th√™m b√¨nh lu·∫≠n"
            value={newCommentContent}
            onChange={(e) => setNewCommentContent(e.target.value)}
            className={`mb-2 ${error ? 'is-invalid' : ''}`}
          />
          {error && <div className="invalid-feedback">{error}</div>}
          <Button
            variant="primary"
            size="sm"
            onClick={handleAddComment}
          >
            <i className="fas fa-comment-dots me-1"></i> G·ª≠i b√¨nh lu·∫≠n
          </Button>
        </div>
      )}
    </div>
  );
};

export default BlogPage;
