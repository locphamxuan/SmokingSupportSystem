//trang ƒëƒÉng k√Ω g√≥i n√¢ng c·∫•p

import React, { useState, useEffect } from 'react';
import {
  Container,
  Grid,
  Card,
  CardContent,
  Typography,
  Button,
  Box,
  List,
  ListItem,
  ListItemIcon,
  ListItemText,
  styled,
  Alert,
  Snackbar,
  Divider,
  Paper
} from '@mui/material';
import CheckCircleIcon from '@mui/icons-material/CheckCircle';
import WorkspacePremiumIcon from '@mui/icons-material/WorkspacePremium';
import { useNavigate } from 'react-router-dom';
import Payment from '../components/Payment';
import axios from 'axios';

// Styled components
const StyledCard = styled(Card)(({ theme, isPremium }) => ({
  height: '100%',
  borderRadius: 15,
  boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)',
  transition: 'transform 0.3s ease',
  background: isPremium ? 'linear-gradient(135deg, #4a90e2 0%, #357abd 100%)' : 'white',
  color: isPremium ? 'white' : 'inherit',
  '&:hover': {
    transform: 'translateY(-5px)',
  },
}));

const FeatureList = styled(List)({
  padding: 0,
  margin: 0,
  textAlign: 'left',
});

const FeatureItem = styled(ListItem)({
  padding: '10px 0',
  display: 'flex',
  alignItems: 'center',
  fontSize: '1rem',
});

const UpgradeButton = styled(Button)(({ theme }) => ({
  backgroundColor: '#28a745',
  color: 'white',
  padding: '12px 30px',
  fontWeight: 'bold',
  marginTop: theme.spacing(4),
  '&:hover': {
    backgroundColor: '#218838',
    transform: 'scale(1.05)',
  },
}));

const PremiumStatusCard = styled(Paper)(({ theme }) => ({
  padding: theme.spacing(4),
  textAlign: 'center',
  background: 'linear-gradient(135deg, #ffd700 0%, #ffb347 100%)',
  borderRadius: 15,
  boxShadow: '0 8px 16px rgba(0, 0, 0, 0.1)',
  marginBottom: theme.spacing(4),
}));

const SubscriptionPlans = () => {
  const navigate = useNavigate();
  const [error, setError] = useState('');
  const [success, setSuccess] = useState('');
  const [paymentOpen, setPaymentOpen] = useState(false);
  const [user, setUser] = useState(null);

  const features = {
    free: [
      'Theo d√µi th·ªùi gian cai thu·ªëc',
      'Nh·∫≠t k√Ω cai thu·ªëc c∆° b·∫£n',
      'Th·ªëng k√™ ƒë∆°n gi·∫£n',
      'C·ªông ƒë·ªìng h·ªó tr·ª£'
    ],
    premium: [
      'T·∫•t c·∫£ t√≠nh nƒÉng Free',
      'Nh·∫≠t k√Ω chi ti·∫øt v·ªõi h√¨nh ·∫£nh',
      'Th·ªëng k√™ n√¢ng cao',
      'T∆∞ v·∫•n chuy√™n gia',
      'K·∫ø ho·∫°ch cai thu·ªëc c√° nh√¢n h√≥a',
      '·ª®ng d·ª•ng kh√¥ng qu·∫£ng c√°o'
    ]
  };

  const handleUpgrade = () => {
    setPaymentOpen(true);
  };

  const handleCloseSnackbar = () => {
    setError('');
    setSuccess('');
  };

  const handlePaymentSuccess = async () => {
    try {
      const token = localStorage.getItem('token');
      if (!token) {
        navigate('/login');
        return;
      }

      const response = await axios.put('http://localhost:5000/api/auth/upgrade-member', {}, {
        headers: { Authorization: `Bearer ${token}` }
      });
      
      if (response.data && response.data.user) {
        localStorage.setItem('user', JSON.stringify(response.data.user));
        setUser(response.data.user);
        setSuccess('N√¢ng c·∫•p t√†i kho·∫£n th√†nh c√¥ng!');
        setTimeout(() => {
          navigate('/profile');
        }, 2000);
      }
    } catch (error) {
      console.error('Error upgrading account:', error);
      if (error.response?.status === 401) {
        localStorage.removeItem('token');
        localStorage.removeItem('user');
        navigate('/login');
      } else if (error.response?.status === 400) {
        setError(error.response.data.message || 'Kh√¥ng th·ªÉ n√¢ng c·∫•p t√†i kho·∫£n. Vui l√≤ng th·ª≠ l·∫°i sau.');
      } else {
        setError('Kh√¥ng th·ªÉ n√¢ng c·∫•p t√†i kho·∫£n. Vui l√≤ng th·ª≠ l·∫°i sau.');
      }
    }
  };

  useEffect(() => {
    const userStr = localStorage.getItem("user");
    let currentUser = null;
    try {
      if (userStr && userStr !== 'undefined') {
        currentUser = JSON.parse(userStr);
      }
    } catch (e) {
      currentUser = null;
    }

    if (!currentUser) {
      navigate('/login');
      return;
    }

    if (currentUser.role === "admin") {
      navigate("/admin/users");
      return;
    }

    setUser(currentUser);
  }, [navigate]);

  // Ki·ªÉm tra user ƒë√£ l√† premium member ch∆∞a
  const isPremiumMember = user && (user.role === 'member' || user.isMember);

  if (!user) {
    return null; // Loading state
  }

  return (
    <Box sx={{ 
      minHeight: '100vh',
      backgroundColor: '#f8f9fa',
      py: 5
    }}>
      <Container>
        {isPremiumMember ? (
          // Hi·ªÉn th·ªã cho user ƒë√£ l√† premium member
          <>
            <PremiumStatusCard>
              <WorkspacePremiumIcon sx={{ fontSize: 80, color: '#ff6b35', mb: 2 }} />
              <Typography variant="h4" gutterBottom sx={{ fontWeight: 'bold', color: '#333' }}>
                üéâ B·∫°n ƒë√£ ƒëƒÉng k√Ω g√≥i Premium!
              </Typography>
              <Typography variant="h6" color="text.secondary" paragraph>
                C·∫£m ∆°n b·∫°n ƒë√£ tin t∆∞·ªüng v√† s·ª≠ d·ª•ng d·ªãch v·ª• Premium c·ªßa ch√∫ng t√¥i
              </Typography>
              <Button
                variant="contained"
                size="large"
                onClick={() => navigate('/profile')}
                sx={{
                  backgroundColor: '#ff6b35',
                  '&:hover': { backgroundColor: '#e55a2b' },
                  mt: 2
                }}
              >
                Quay v·ªÅ trang c√° nh√¢n
              </Button>
            </PremiumStatusCard>

            {/* Hi·ªÉn th·ªã c√°c t√≠nh nƒÉng Premium ƒëang s·ª≠ d·ª•ng */}
            <Typography variant="h5" align="center" gutterBottom sx={{ mb: 4 }}>
              C√°c t√≠nh nƒÉng Premium b·∫°n ƒëang s·ª≠ d·ª•ng
            </Typography>
            <Grid container spacing={4} justifyContent="center">
              <Grid item xs={12} md={8}>
                <StyledCard isPremium>
                  <CardContent sx={{ textAlign: 'center' }}>
                    <Typography variant="h5" gutterBottom sx={{ mb: 4 }}>
                      G√≥i Premium - ƒêang ho·∫°t ƒë·ªông
                    </Typography>
                    <FeatureList>
                      {features.premium.map((feature, index) => (
                        <FeatureItem key={index}>
                          <ListItemIcon sx={{ minWidth: 40 }}>
                            <CheckCircleIcon sx={{ color: 'white' }} />
                          </ListItemIcon>
                          <ListItemText primary={feature} />
                        </FeatureItem>
                      ))}
                    </FeatureList>
                  </CardContent>
                </StyledCard>
              </Grid>
            </Grid>
          </>
        ) : (
          // Hi·ªÉn th·ªã cho guest user
          <>
            <Typography variant="h4" align="center" gutterBottom sx={{ mb: 5 }}>
              Ch·ªçn g√≥i ph√π h·ª£p v·ªõi b·∫°n
            </Typography>
            <Typography variant="h6" align="center" color="text.secondary" paragraph>
              N√¢ng c·∫•p l√™n Premium ƒë·ªÉ tr·∫£i nghi·ªám ƒë·∫ßy ƒë·ªß t√≠nh nƒÉng
            </Typography>
            <Grid container spacing={4} justifyContent="center">
              <Grid item xs={12} md={6} lg={5}>
                <StyledCard>
                  <CardContent sx={{ textAlign: 'center' }}>
                    <Typography variant="h5" gutterBottom sx={{ mb: 4 }}>
                      G√≥i Mi·ªÖn ph√≠
                    </Typography>
                    <Typography variant="h3" color="primary" gutterBottom>
                      Mi·ªÖn ph√≠
                    </Typography>
                    <Typography variant="body2" color="text.secondary" gutterBottom>
                      G√≥i hi·ªán t·∫°i c·ªßa b·∫°n
                    </Typography>
                    
                    <Divider sx={{ my: 2 }} />
                    <FeatureList>
                      {features.free.map((feature, index) => (
                        <FeatureItem key={index}>
                          <ListItemIcon sx={{ minWidth: 40 }}>
                            <CheckCircleIcon sx={{ color: '#28a745' }} />
                          </ListItemIcon>
                          <ListItemText primary={feature} />
                        </FeatureItem>
                      ))}
                    </FeatureList>
                  </CardContent>
                </StyledCard>
              </Grid>
              <Grid item xs={12} md={6} lg={5}>
                <StyledCard isPremium>
                  <CardContent sx={{ textAlign: 'center' }}>
                    <Typography variant="h5" gutterBottom sx={{ mb: 4 }}>
                      G√≥i Premium
                    </Typography>
                    <Typography variant="h3" gutterBottom>
                      199.000ƒë/th√°ng
                    </Typography>
                    <Typography variant="body2" gutterBottom sx={{ opacity: 0.9 }}>
                      Tr·∫£i nghi·ªám ƒë·∫ßy ƒë·ªß t√≠nh nƒÉng
                    </Typography>
                    
                    <Divider sx={{ my: 2 }} />
                    <FeatureList>
                      {features.premium.map((feature, index) => (
                        <FeatureItem key={index}>
                          <ListItemIcon sx={{ minWidth: 40 }}>
                            <CheckCircleIcon sx={{ color: 'white' }} />
                          </ListItemIcon>
                          <ListItemText primary={feature} />
                        </FeatureItem>
                      ))}
                    </FeatureList>
                    <UpgradeButton
                      variant="contained"
                      size="large"
                      onClick={handleUpgrade}
                    >
                      N√¢ng c·∫•p ngay
                    </UpgradeButton>
                  </CardContent>
                </StyledCard>
              </Grid>
            </Grid>
          </>
        )}
      </Container>

      <Payment
        open={paymentOpen}
        onClose={() => setPaymentOpen(false)}
        onSuccess={handlePaymentSuccess}
      />

      {/* Success/Error Messages */}
      <Snackbar
        open={!!error || !!success}
        autoHideDuration={6000}
        onClose={handleCloseSnackbar}
      >
        <Alert
          onClose={handleCloseSnackbar}
          severity={error ? 'error' : 'success'}
          sx={{ width: '100%' }}
        >
          {error || success}
        </Alert>
      </Snackbar>
    </Box>
  );
};

export default SubscriptionPlans; 
