openapi: 3.0.0
info:
  title: Smoking Support System API
  description: API documentation for the Smoking Support System platform
  version: 1.0.0
  contact:
    email: support@smokingsupport.com

servers:
  - url: http://localhost:5000/api
    description: Development server

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
        username:
          type: string
        email:
          type: string
        phoneNumber:
          type: string
        address:
          type: string
        role:
          type: string
          enum: [member, memberVip, coach, admin]
          description: |
            member: chưa mua gói, memberVip: đã mua gói, coach: huấn luyện viên, admin: quản trị viên.
        isMemberVip:
          type: boolean
        coachId:
          type: integer
        createdAt:
          type: string
          format: date-time
    LoginRequest:
      type: object
      required:
        - emailOrUsername
        - password
      properties:
        emailOrUsername:
          type: string
        password:
          type: string
    RegisterRequest:
      type: object
      required:
        - username
        - password
        - email
        - phoneNumber
        - address
      properties:
        username:
          type: string
        password:
          type: string
        email:
          type: string
        phoneNumber:
          type: string
        address:
          type: string
    SmokingProfile:
      type: object
      properties:
        id:
          type: integer
        userId:
          type: integer
        cigarettesPerDay:
          type: integer
        costPerPack:
          type: integer
        smokingFrequency:
          type: string
        healthStatus:
          type: string
        cigaretteType:
          type: string
        quitReason:
          type: string
    QuitPlan:
      type: object
      properties:
        id:
          type: integer
        userId:
          type: integer
        coachId:
          type: integer
        startDate:
          type: string
          format: date
        targetDate:
          type: string
          format: date
        planDetail:
          type: string
        createdAt:
          type: string
          format: date-time
        currentProgress:
          type: integer
        initialCigarettes:
          type: integer
        dailyReduction:
          type: integer
        quitReason:
          type: string
    Progress:
      type: object
      properties:
        id:
          type: integer
        userId:
          type: integer
        planId:
          type: integer
        date:
          type: string
          format: date
        cigarettes:
          type: integer
        note:
          type: string
    Booking:
      type: object
      properties:
        id:
          type: integer
        memberId:
          type: integer
        coachId:
          type: integer
        slot:
          type: string
          enum: ['7h-9h', '10h-12h', '13h-15h', '16h-18h']
        slotDate:
          type: string
          format: date
        status:
          type: string
          enum: [đang chờ xác nhận, đã xác nhận, khách hàng đã hủy, coach đã hủy]
        note:
          type: string
        createdAt:
          type: string
          format: date-time
    Message:
      type: object
      properties:
        id:
          type: integer
        senderId:
          type: integer
        receiverId:
          type: integer
        progressId:
          type: integer
        content:
          type: string
        sentAt:
          type: string
          format: date-time
        isRead:
          type: boolean
    MemberWithAppointment:
      allOf:
        - $ref: '#/components/schemas/User'
        - type: object
          properties:
            appointment:
              $ref: '#/components/schemas/Booking'
    Badge:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        description:
          type: string
        badgeType:
          type: string
          enum: [loai1, loai2, loai3, loai4, loai5, loai6, loai7]
        requirement:
          type: string
        imageUrl:
          type: string
          format: uri
        awardedAt:
          type: string
          format: date-time
    Post:
      type: object
      properties:
        id:
          type: integer
        userId:
          type: integer
        title:
          type: string
        content:
          type: string
        createdAt:
          type: string
          format: date-time
        status:
          type: string
          enum: [chờ duyệt, đã duyệt, từ chối]
    Comment:
      type: object
      properties:
        id:
          type: integer
        postId:
          type: integer
        userId:
          type: integer
        content:
          type: string
        createdAt:
          type: string
          format: date-time
    UserBadge:
      type: object
      properties:
        id:
          type: integer
        userId:
          type: integer
        badgeId:
          type: integer
        awardedAt:
          type: string
          format: date-time
    UserStatistics:
      type: object
      properties:
        id:
          type: integer
        userId:
          type: integer
        totalDaysWithoutSmoking:
          type: integer
        totalMoneySaved:
          type: number
        healthImprovements:
          type: string
        lastUpdated:
          type: string
          format: date-time
    Notification:
      type: object
      properties:
        id:
          type: integer
        userId:
          type: integer
        message:
          type: string
        type:
          type: string
          description: 'Loại thông báo: reminder, motivation, system, ...'
        createdAt:
          type: string
          format: date-time
        isRead:
          type: boolean
    Report:
      type: object
      properties:
        id:
          type: integer
        userId:
          type: integer
        content:
          type: string
        createdAt:
          type: string
          format: date-time
    Ranking:
      type: object
      properties:
        id:
          type: integer
        userId:
          type: integer
        totalDaysWithoutSmoking:
          type: integer
        totalMoneySaved:
          type: number
        lastUpdated:
          type: string
          format: date-time
    SmokingDailyLog:
      type: object
      properties:
        id:
          type: integer
        userId:
          type: integer
        progressId:
          type: integer
        logDate:
          type: string
          format: date
        cigarettes:
          type: integer
        feeling:
          type: string
    MembershipPackage:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        description:
          type: string
        price:
          type: number
        durationInDays:
          type: integer
        features:
          type: array
          items:
            type: string
          description: Danh sách đặc điểm/tính năng của gói (mỗi phần tử là 1 dòng)
    UserSuggestedQuitPlan:
      type: object
      properties:
        id:
          type: integer
        userId:
          type: integer
        suggestedPlanId:
          type: integer
        startDate:
          type: string
          format: date
        targetDate:
          type: string
          format: date
        status:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    
    SuggestedQuitPlanStage:
      type: object
      properties:
        id:
          type: integer
        suggestedPlanId:
          type: integer
        stageName:
          type: string
        objective:
          type: string
        stageOrder:
          type: integer
        initialCigarettes:
          type: integer
        targetCigarettes:
          type: integer
        description:
          type: string
    
    UserQuitPlanStage:
      type: object
      properties:
        id:
          type: integer
          description: "Auto-generated unique identifier for the user's quit plan stage"
        quitPlanId:
          type: integer
          description: "Reference to the associated quit plan"
        stageName:
          type: string
          description: "Name of the stage (copied from suggested plan stage)"
        objective:
          type: string
          description: "Objective of the stage (copied from suggested plan stage)"
        initialCigarettes:
          type: integer
          description: "Initial cigarettes count for this stage"
        targetCigarettes:
          type: integer
          description: "Target cigarettes count for this stage"
        status:
          type: string
          enum: ["In Progress", "Not Started", "Completed"]
          description: "Stage status - first stage starts as 'In Progress', others as 'Not Started'"
        startDate:
          type: string
          format: date-time
          nullable: true
          description: "Date when stage was started (auto-set when status changes to 'In Progress')"
        endDate:
          type: string
          format: date-time
          nullable: true
          description: "Date when stage was completed (auto-set when status changes to 'Completed')"
        createdAt:
          type: string
          format: date-time
          description: "Timestamp when stage was automatically created"

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

paths:
  /auth/login:
    post:
      tags:
        - Authentication
      summary: User login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                  user:
                    $ref: '#/components/schemas/User'
        '401':
          description: Invalid credentials

  /auth/register:
    post:
      tags:
        - Authentication
      summary: Register new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                  user:
                    $ref: '#/components/schemas/User'
        '400':
          description: Invalid input

  /auth/upgrade-member:
    post:
      tags:
        - Authentication
      summary: Upgrade user to memberVip
      security:
        - BearerAuth: []
      responses:
        '200':
          description: User upgraded to memberVip successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '403':
          description: Forbidden
        '401':
          description: Unauthorized

  /auth/profile:
    get:
      tags:
        - Users
      summary: Get user profile
      security:
        - BearerAuth: []
      responses:
        '200':
          description: User profile retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  username:
                    type: string
                  email:
                    type: string
                  phoneNumber:
                    type: string
                  address:
                    type: string
                  role:
                    type: string
                  isMemberVip:
                    type: boolean
                  coachId:
                    type: integer
                  createdAt:
                    type: string
                    format: date-time
                  smokingStatus:
                    $ref: '#/components/schemas/SmokingProfile'
    put:
      tags:
        - Users
      summary: Update user profile
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: Profile updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

  /auth/smoking-status:
    put:
      tags:
        - Smoking Profiles
      summary: Update smoking profile
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SmokingProfile'
      responses:
        '200':
          description: Smoking profile updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SmokingProfile'

  /auth/quit-plan:
    post:
      tags:
        - Quit Plans
      summary: Create or update quit plan
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QuitPlan'
      responses:
        '200':
          description: Quit plan created/updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '400':
          description: Invalid input
    get:
      tags:
        - Quit Plans
      summary: Get user's quit plan
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Quit plan retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  quitPlan:
                    $ref: '#/components/schemas/QuitPlan'

  /auth/progress:
    post:
      tags:
        - Progress
      summary: Record daily progress
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Progress'
      responses:
        '200':
          description: Progress recorded successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string

  /auth/progress/latest:
    get:
      tags:
        - Progress
      summary: Get latest progress
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Latest progress retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  progress:
                    $ref: '#/components/schemas/Progress'

  /auth/progress/history:
    get:
      tags:
        - Progress
      summary: Lấy lịch sử tiến trình cai thuốc
      security:
        - BearerAuth: []
      parameters:
        - in: query
          name: full
          schema:
            type: boolean
          description: 'Nếu true và user là memberVip thì trả về toàn bộ, nếu false hoặc member thường thì trả về 30 ngày gần nhất'
      responses:
        '200':
          description: Lịch sử tiến trình
          content:
            application/json:
              schema:
                type: object
                properties:
                  history:
                    type: array
                    items:
                      type: object
                      properties:
                        Date:
                          type: string
                          format: date
                        Cigarettes:
                          type: integer
        '401':
          description: Unauthorized
        '500':
          description: Server error

  /smoking-profiles:
    post:
      tags:
        - Smoking Profiles
      summary: Create smoking profile
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SmokingProfile'
      responses:
        '201':
          description: Smoking profile created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SmokingProfile'
    get:
      tags:
        - Smoking Profiles
      summary: Get user's smoking profile
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Smoking profile retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SmokingProfile'

  /quit-plans:
    get:
      tags:
        - Quit Plans
      summary: Get user's quit plans
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Quit plans retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/QuitPlan'

  /progress:
    get:
      tags:
        - Progress
      summary: Get user's progress
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Progress retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Progress'

  /booking:
    get:
      tags:
        - Booking
      summary: Get user's bookings
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Bookings retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Booking'
        '401':
          description: Unauthorized
        '500':
          description: Server error
    post:
      tags:
        - Booking
      summary: Create a new booking
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - coachId
                - slot
                - slotDate
              properties:
                coachId:
                  type: integer
                slot:
                  type: string
                  enum: ['7h-9h', '10h-12h', '13h-15h', '16h-18h']
                slotDate:
                  type: string
                  format: date
                note:
                  type: string
      responses:
        '201':
          description: Booking created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  booking:
                    $ref: '#/components/schemas/Booking'
        '400':
          description: Invalid input
        '401':
          description: Unauthorized
        '500':
          description: Server error

  /booking/{bookingId}/confirm:
    post:
      tags:
        - Booking
      summary: Confirm a booking
      parameters:
        - in: path
          name: bookingId
          required: true
          schema:
            type: integer
          description: ID of the booking to confirm
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Booking confirmed successfully
        '404':
          description: Booking not found
        '401':
          description: Unauthorized
        '500':
          description: Server error

  /booking/{bookingId}/cancel:
    post:
      tags:
        - Booking
      summary: Cancel a booking
      parameters:
        - in: path
          name: bookingId
          required: true
          schema:
            type: integer
          description: ID of the booking to cancel
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Booking cancelled successfully
        '404':
          description: Booking not found
        '401':
          description: Unauthorized
        '500':
          description: Server error

  /messages:
    post:
      tags:
        - Messages
      summary: Send message
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Message'
      responses:
        '201':
          description: Message sent successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
    get:
      tags:
        - Messages
      summary: Get user's messages
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Messages retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Message'

  /admin/users:
    get:
      tags:
        - Admin
      summary: Get all users
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Users retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
    put:
      tags:
        - Admin
      summary: Update user (Not implemented)
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '501':
          description: Not implemented in external API
    delete:
      tags:
        - Admin
      summary: Delete user (Not implemented)
      security:
        - BearerAuth: []
      responses:
        '501':
          description: Not implemented in external API

  /admin/coaches:
    get:
      tags:
        - Admin
      summary: Get all coaches
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Coaches retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'

  /admin/statistics:
    get:
      tags:
        - Admin
      summary: Get statistics (Not implemented)
      security:
        - BearerAuth: []
      responses:
        '501':
          description: Not implemented in external API

  /messages/chat-members:
    get:
      tags:
        - Messages
      summary: Get chat members for coach (Not implemented)
      security:
        - BearerAuth: []
      responses:
        '501':
          description: Not implemented in external API

  /hlv/members:
    get:
      tags:
        - Coach
      summary: Get assigned members for coach
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Members retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  members:
                    type: array
                    items:
                      $ref: '#/components/schemas/MemberWithAppointment'

  /auth/badges:
    get:
      tags:
        - Badges
      summary: Get user's badges
      security:
        - BearerAuth: []
      responses:
        '200':
          description: User's badges retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  badges:
                    type: array
                    items:
                      $ref: '#/components/schemas/Badge'
        '401':
          description: Unauthorized
        '500':
          description: Server error

  /auth/posts:
    get:
      tags:
        - Blog Posts
      summary: Get all blog posts
      responses:
        '200':
          description: List of blog posts retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Post'
        '500':
          description: Server error
    post:
      tags:
        - Blog Posts
      summary: Create a new blog post
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - title
                - content
              properties:
                title:
                  type: string
                content:
                  type: string
      responses:
        '201':
          description: Blog post created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  post:
                    $ref: '#/components/schemas/Post'
        '400':
          description: Invalid input
        '401':
          description: Unauthorized
        '500':
          description: Server error

  /auth/posts/{postId}/comments:
    get:
      tags:
        - Blog Posts
      summary: Get comments for a specific blog post
      parameters:
        - in: path
          name: postId
          required: true
          schema:
            type: integer
          description: The ID of the blog post to retrieve comments for.
      responses:
        '200':
          description: List of comments retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Comment'
        '500':
          description: Server error
    post:
      tags:
        - Blog Posts
      summary: Add a new comment to a blog post
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: postId
          required: true
          schema:
            type: integer
          description: The ID of the blog post to add a comment to.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - content
              properties:
                content:
                  type: string
      responses:
        '201':
          description: Comment added successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  comment:
                    $ref: '#/components/schemas/Comment'
        '400':
          description: Invalid input
        '401':
          description: Unauthorized
        '500':
          description: Server error

  /auth/statistics:
    get:
      tags:
        - Statistics
      summary: Get user statistics
      security:
        - BearerAuth: []
      responses:
        '200':
          description: User statistics retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserStatistics'
        '401':
          description: Unauthorized
        '500':
          description: Server error

  /auth/notifications:
    get:
      tags:
        - Notifications
      summary: Get user notifications
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Notifications retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Notification'
        '401':
          description: Unauthorized
        '500':
          description: Server error

  /auth/notifications/{notificationId}/read:
    put:
      tags:
        - Notifications
      summary: Mark notification as read
      parameters:
        - in: path
          name: notificationId
          required: true
          schema:
            type: integer
          description: ID of the notification to mark as read
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Notification marked as read successfully
        '404':
          description: Notification not found
        '401':
          description: Unauthorized
        '500':
          description: Server error

  /auth/reports:
    post:
      tags:
        - Reports
      summary: Submit a report
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - content
              properties:
                content:
                  type: string
      responses:
        '201':
          description: Report submitted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  report:
                    $ref: '#/components/schemas/Report'
        '400':
          description: Invalid input
        '401':
          description: Unauthorized
        '500':
          description: Server error

  /auth/rankings:
    get:
      tags:
        - Rankings
      summary: Get user rankings
      responses:
        '200':
          description: Rankings retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Ranking'
        '500':
          description: Server error

  /auth/daily-log:
    get:
      tags:
        - Daily Log
      summary: Get user's daily smoking log
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Daily log retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SmokingDailyLog'
        '401':
          description: Unauthorized
        '500':
          description: Server error
    post:
      tags:
        - Daily Log
      summary: Add daily smoking log entry
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - cigarettes
              properties:
                cigarettes:
                  type: integer
                feeling:
                  type: string
                logDate:
                  type: string
                  format: date
      responses:
        '201':
          description: Daily log entry added successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  logEntry:
                    $ref: '#/components/schemas/SmokingDailyLog'
        '400':
          description: Invalid input
        '401':
          description: Unauthorized
        '500':
          description: Server error

  /auth/membership-packages:
    get:
      tags:
        - Membership
      summary: Get available membership packages
      responses:
        '200':
          description: Membership packages retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MembershipPackage'
        '500':
          description: Server error

  /auth/quit-plan/suggested:
    get:
      tags:
        - Quit Plans
      summary: Lấy danh sách kế hoạch mẫu hệ thống (chỉ memberVip)
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Danh sách kế hoạch mẫu
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/QuitPlan'
        '403':
          description: Chỉ dành cho memberVip

  /auth/user-suggested-quit-plan:
    post:
      tags:
        - Quit Plans
      summary: |
        Lưu kế hoạch cai thuốc mẫu mà người dùng đã chọn với tự động tạo stages
        
        **Automatic Stage Creation Behavior:**
        
        1. Tạo bản ghi UserSuggestedQuitPlans với thông tin plan
        2. Tự động tạo một QuitPlan record để làm container cho các stages
        3. Fetch tất cả stages từ SuggestedQuitPlanStages theo suggestedPlanId
        4. Tự động tạo UserQuitPlanStages cho mỗi stage từ suggested plan:
           - Stage đầu tiên (StageOrder = 1) có status = "In Progress"
           - Các stage còn lại có status = "Not Started"
           - Copy thông tin từ SuggestedQuitPlanStages (StageName, Objective, InitialCigarettes, TargetCigarettes)
        5. Thực hiện tất cả operations trong transaction để đảm bảo data integrity
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - suggestedPlanId
                - startDate
                - targetDate
              properties:
                suggestedPlanId:
                  type: integer
                  description: "ID của suggested plan template"
                startDate:
                  type: string
                  format: date
                  description: "Ngày bắt đầu thực hiện kế hoạch"
                targetDate:
                  type: string
                  format: date
                  description: "Ngày mục tiêu hoàn thành kế hoạch"
      responses:
        '200':
          description: |
            Lưu kế hoạch mẫu thành công - Tự động tạo stages
            
            Response bao gồm thông tin về kế hoạch đã tạo và danh sách stages được tự động sinh
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Lưu kế hoạch mẫu thành công!"
                  userSuggestedQuitPlanId:
                    type: integer
                    description: "ID của UserSuggestedQuitPlan vừa tạo"
                  quitPlanId:
                    type: integer
                    description: "ID của QuitPlan container được tự động tạo"
                  stages:
                    type: array
                    description: "Danh sách các stages được tự động tạo từ suggested plan"
                    items:
                      $ref: '#/components/schemas/UserQuitPlanStage'
        '400':
          description: Dữ liệu không hợp lệ
        '401':
          description: Unauthorized
        '500':
          description: |
            Server error - Transaction rollback được thực hiện tự động nếu có lỗi
            
            Nếu có lỗi trong quá trình tạo stages, toàn bộ transaction sẽ được rollback

  /admin/packages:
    get:
      tags:
        - Admin
      summary: Get all membership packages (admin)
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Membership packages retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MembershipPackage'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Server error
    post:
      tags:
        - Admin
      summary: Create a new membership package
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MembershipPackage'
      responses:
        '201':
          description: Membership package created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MembershipPackage'
        '400':
          description: Invalid input
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Server error

  /admin/packages/{id}:
    put:
      tags:
        - Admin
      summary: Update a membership package
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: ID of the membership package to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MembershipPackage'
      responses:
        '200':
          description: Membership package updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MembershipPackage'
        '400':
          description: Invalid input
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Membership package not found
        '500':
          description: Server error
    delete:
      tags:
        - Admin
      summary: Delete a membership package
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: ID of the membership package to delete
      responses:
        '200':
          description: Membership package deleted successfully
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Membership package not found
        '500':
          description: Server error 